{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LabyMod4 API Wiki","text":"<p>Click here to get to the wiki of our new addon API.</p> <p>Have you found something missing from this wiki that you think is important, or are you unhappy with something? Please fork our wiki repository, add/improve it and create a pull request  here.</p>"},{"location":"pages/addon/","title":"Introduction","text":"<p>With LabyMod 4 we've improved the way to develop addons.  You now have one project per addon; this allows you to write version-independent code in the same project as version-dependent code without needing to copy &amp; paste the version-independent code for every version.</p> <p>Here are some of the changes with our new Addon API:</p> <ul> <li>With our brand new Activity System, you can easily create and theme custom screens without needing to know how to use OpenGL</li> <li>More events for almost every occasion that behave like server-side events</li> <li>Improved way to create and use configurations</li> <li>Easy internationalization</li> <li>Mixin for bytecode manipulation in every version</li> <li>Easier setup and debugging of the addon</li> </ul> <p> As of now, you'll have to manually update your <code>build.gradle.kts</code> when we update our Gradle plugin or support a new Minecraft version.  If you want to stay up to date at any time or if you have any questions regarding our Addon API, please feel free to  join our development Discord.</p> <p>Have you found something missing from this wiki that you think is important, or are you unhappy with something?  Please fork our wiki repository, add/improve it and create a pull request  here.</p>"},{"location":"pages/addon/additional-infos/","title":"Additional Information","text":"<p>Here you can find some information about things that didn't fit anywhere else.</p>"},{"location":"pages/addon/additional-infos/#why-is-the-naming-on-some-of-our-methods-so-weird","title":"Why Is the Naming on Some of Our Methods So Weird?","text":"<p>We've decided to change how we name our getters &amp; setters.  The \"established\" naming for getters would be <code>getSomething()</code>, but we've decided as an \"internal naming convention\" that getters that can't return <code>null</code> and return a type created by us don't have the <code>get</code> prefix but instead are just called by their name.  So instead of for example <code>getMinecraft()</code> you'll only find <code>minecraft()</code>.  Setters would normally have the prefix <code>set</code>.  But if the setter is returning the same type of the class it is in; the <code>set</code> prefix will also be removed (this is most common in builders, so for example, in our renderers. instead of <code>setPos(x, y)</code>, you'll only find <code>pos(x, y)</code>).</p>"},{"location":"pages/addon/troubleshoot/","title":"Troubleshoot","text":"<p>Common mistakes and errors with possible solutions are explained on this page.</p> <p>If you have an issue that is described here, please read carefully.  If the approach to resolving your issue doesn't work feel free to ask for help on our development Discord.</p> <p>If you need help from others, please always keep in mind that they're human and don't always answer right away and think about what is written on NoHello.net.</p>"},{"location":"pages/addon/troubleshoot/#the-labymod-api-doesnt-load","title":"The LabyMod API Doesn't Load","text":"<p>It can occur that the LabyMod 4 Addon API doesn't load after a restart (or just a Gradle reload) while Gradle prints no errors.  If this happens to you, try to delete the <code>build-data.txt</code> in the project root folder and refresh Gradle.</p>"},{"location":"pages/addon/troubleshoot/#my-lss-stylesheet-doesnt-load","title":"My LSS StyleSheet Doesn't load","text":"<p>If it can happen that the LSS StyleSheet doesn't load, this is most commonly caused by a forgotten or misplaced semicolon (<code>;</code>) or curly bracket (<code>{</code>, <code>}</code>); the affected line should be printed to your log. Try to search for those two cases. If you cannot find anything, feel free to ask for help on our development Discord and provide your LSS StyleSheet.</p>"},{"location":"pages/addon/activities/activity/","title":"What are Activities?","text":"<p>Activities are an easy way to create custom screens, and the best part: you don't need to know OpenGL to create most activities.  Only if you want to display something truly custom, knowing OpenGL could be beneficial. However, it still wouldn't be much of a problem if you don't because you have many other possibilities to render anything you want.</p> <p>In the following pages, we will explain how to create custom activities, create and use widgets in your Activities, and theme them with LSS. It can be a bit much to take in at first, but it's worth it.</p> <p>Examples are shown on every page; you will find a link to the section with the example on every page within the first paragraphs. Click here to see the first example.</p> Important Note <p>Remember that we're explaining the Activity System in multiple steps. On this page, we will explain how to create bare Activities without any widgets or LSS. This is for example purposes only; we highly recommend using Widgets and LSS in your Activities, as the system is not optimized for bare Activities. If you create custom screens, in order to be accepted in our addon store, your screens need to be created with this system, and they need to support theming. </p>"},{"location":"pages/addon/activities/activity/#creating-a-bare-activity","title":"Creating a Bare Activity","text":"<p>All you need to do to create an Activity is create a new class and inherit either <code>SimpleActivity</code> or <code>Activity</code>. The SimpleActivity and Activity only have one difference. By inheriting <code>SimpleActivity</code>, your Activity renders the default theme background; by inheriting just <code>Activity</code>, you'll have an empty Activity that you can 100% customize. For our example, we'll be inheriting the <code>SimpleActivity</code> as we register it as a NavigationElement (so it will be displayed as another tab in the navigation). </p> <p>After we inherit the Activity superclass (or one of its extensions), we need to implement the <code>renew</code> method. In most cases, just returning a new instance of your Activity will do enough; in some cases, you might want to set the fields of your current activity instance to the new one, as the user's progress inside the Activity might be lost otherwise. Now we need to add the annotation at the top of our class, and the Activity will open.</p> <p>In this case, we want to render a text at the center of the screen, and as we are creating a bare Activity, we'll overwrite the <code>render</code> method. (please keep in mind that the super call has to be at the head of the method. Otherwise, our text will be rendered beneath the background). </p> <p>All we have to do now is to get the bounds of the Activity by declaring <code>this.bounds()</code> as a local variable (the bounds represent the position and size of activities and widgets - more on that in the part about LSS). Then we need get the <code>TextRenderer</code> by calling <code>this.labyAPI.renderPipeline().textRenderer()</code> as we will render our text with that renderer. </p> <p>Now to the rendering, apply your text to the renderer by using the setter <code>text</code>; our text is the String <code>\"I am a bare rendered example text\"</code>, so we use <code>textRenderer.text(\"I am a bare rendered example text\")</code>; after that, we set our position with the bounds we got before. As we want the text centered we need the <code>centerX</code> and <code>centerY</code> float and set them via <code>textRenderer.pos(bounds.getCenterX(), bounds.getCenterY())</code>. </p> <p>We could theoretically render it now, but we want to adjust the renderer a bit. As of now, the text would start at the centered x position, but we want it centered, so we add <code>textRenderer.centered(true)</code>. Now, as this text will be rendered in a menu, we don't want a shadow; all we need to do to remove the shadow is add <code>textRenderer.shadow(false)</code>, maybe add a bit of color with <code>textRenderer.color(Color.ORANGE.getRGB())</code>.</p> <p>Now, as all is set as we want, we can call <code>textRenderer.render(stack)</code>, and we are finished. </p>"},{"location":"pages/addon/activities/activity/#bare-activity-result","title":"Bare Activity Result","text":"<p>Looking back at what we just wrote, this is what the code and result would look like:</p>  ExampleBareActivity Result <pre><code>@AutoActivity\npublic class ExampleBareActivity extends SimpleActivity {\n\n@Override\npublic void render(Stack stack, MutableMouse mouse, float partialTicks) {\nsuper.render(stack, mouse, partialTicks);\n\nBounds bounds = this.bounds();\nTextRenderer textRenderer = this.labyAPI.renderPipeline().textRenderer();\ntextRenderer.text(\"I am a bare rendered example text\")\n.pos(bounds.getCenterX(), bounds.getCenterY())\n.centered(true)\n.shadow(false)\n.color(Color.ORANGE.getRGB())\n.render(stack);\n}\n\n@Override\npublic &lt;T extends LabyScreen&gt; @Nullable T renew() {\nreturn new ExampleBareActivity().generic();\n}\n}\n</code></pre> <p></p>"},{"location":"pages/addon/activities/lss/","title":"Understand LSS","text":"<p>If you've worked with CSS before, LSS shouldn't be all too new; both share a similar basic syntax. We have implemented LSS as a system to design and theme responsive GUIs (Screens) conveniently; no more OpenGL hustle, just Activities, Widgets, and LSS. </p>"},{"location":"pages/addon/activities/lss/#lss-in-a-nutshell","title":"LSS in a Nutshell","text":"<p>The main thing you need to know about LSS is that while you add LSS StyleSheets to your Activity, you can't manipulate Activities directly, only the Widgets inside of that Activity.  A list of all Widgets delivered with the API can be found here.</p> <p>CSS and LSS have very similar syntax, but here are some of their differences:</p> <ul> <li>CSS has classes, and LSS has ids that can be added to Widgets directly in the Activities Java code.</li> <li>In CSS, you can declare the type. You can do the same in LSS; there is one thing to keep in mind: if the name of a Widget ends with the suffix \"Widget\", the suffix gets removed (so, for example, <code>Component</code> instead of <code>ComponentWidget</code> or <code>Icon</code> instead of <code>IconWidget</code>).</li> <li>LSS has no types like <code>p</code> for pixels, etc. LSS always works with relative pixels (1 = one pixel on GUI scale 1, four pixels on GUI scale 2, and 16 pixels on GUI scale 3)</li> </ul>"},{"location":"pages/addon/activities/lss/#creating-activities-with-lss","title":"Creating Activities with LSS","text":"<p>Looking back at the last page, we created an Activity with a ComponentWidget but without LSS.  We'll again use the last page's result to make it work with LSS.</p> <p>We start by deleting the <code>postStyleSheetLoad</code> method, which we used before to set the position of our Widget.  As LSS is doing that now, we no longer need this method.  Now we head to our <code>resources</code> folder in the <code>core</code> module (<code>src/main/resources/</code>) and go to (or create) the following folder structure: <code>assets/example/themes/vanilla/lss/</code> (replace <code>example</code> with the namespace of your addon).  After that, create a new file called <code>example.lss</code>. </p> <p>Now the magic part: as we didn't set an id, we'll use the type.  We have a <code>ComponentWidget</code> in our Activity, so we're going to type <code>Component {</code> into the first line. As we want our Component centered, we'll add <code>left: 50%;</code> and <code>top: 50%;</code> to the following lines.  If we were doing that, the Component would start at 50% of the screen each, adding <code>alignment-x: center;</code> and <code>alignment-y: center;</code> as the following lines.  This will adjust the anchor point of the Widget to its center, so 50% from the left will be exactly at the center of the Widget. The last thing we'll need to do here is close the block with <code>},</code> and we're done.</p> <p>All we have to do now is go back to our Activity that uses LSS, add the <code>Link</code> annotation above and add \"example.lss\" as the annotation's argument. Theoretically, we're done. But there are a few things left that we can do.  For once, we can remove the field <code>componentWidget</code>, as we don't need the Widget anywhere else anymore. We can also remove the argument <code>NamedTextColor.GOLD</code> from the ComponentWidget's constructor call and add <code>text-color: gold;</code> to our LSS file. Now, there is one more thing we can do, and that is to add an id to our Widget.  We'll do this by just calling <code>componentWidget.addId(\"test-widget\")</code> and replacing <code>Component</code> in our LSS StyleSheet with <code>.test-widget</code>.  This will be very important when creating complex Activities so that blocks for the same Widget don't overwrite each other.</p> <p>And we're done. You can debug your Activity by pressing <code>CTRL + D</code> and pressing <code>ARROW RIGHT</code> until you see the name of your Activity if ever something doesn't work like expected.</p>"},{"location":"pages/addon/activities/lss/#lss-activity-result","title":"LSS Activity Result","text":"<p>Like before, this is what the code we described above would look like:</p>  ExampleLssActivity example.lss Result <pre><code>@AutoActivity\n@Link(\"example.lss\")\npublic class ExampleLssActivity extends SimpleActivity {\n\n@Override\npublic void initialize(Parent parent) {\nsuper.initialize(parent);\n\nComponentWidget componentWidget = ComponentWidget.text(\n\"I am an example text rendered with a ComponentWidget set via LSS\"\n);\ncomponentWidget.addId(\"test-widget\");\nthis.document().addChild(componentWidget);\n}\n\n@Override\npublic &lt;T extends LabyScreen&gt; @Nullable T renew() {\nreturn new ExampleLssActivity().generic();\n}\n}\n</code></pre> <pre><code>.test-widget {\nleft: 50%;\ntop: 50%;\nalignment-x: center;\nalignment-y: center;\ntext-color: gold;\n}\n</code></pre> <p></p>"},{"location":"pages/addon/activities/lss/#create-widgets-with-lss","title":"Create Widgets With LSS","text":"<p>todo: write</p>"},{"location":"pages/addon/activities/lss/#injecting-blocks-into-other-stylesheets","title":"Injecting Blocks Into Other StyleSheets","text":"<p>todo: write</p>"},{"location":"pages/addon/activities/themes/","title":"Theming","text":"<p>One of the key advantages of our Activity System with LSS over OpenGL is that you can easily theme your Activities with LSS. With OpenGL you'd have to rewrite the screen for every theme you want to support.  With LSS, just like with CSS, you can just have an LSS StyleSheet for each theme. You can also create your own theme. All that is explained on this page.</p> Important Note <p>Creating own themes doesn't work as of now. But we're working on it!</p>"},{"location":"pages/addon/activities/themes/#how-themes-work","title":"How Themes Work","text":"<p>todo: write</p>"},{"location":"pages/addon/activities/widgets/","title":"Use and Create Widgets","text":"<p>Widgets are a valuable and easy way to customize your Activities and are the backbone of every themeable Activity.</p>"},{"location":"pages/addon/activities/widgets/#use-widgets-in-activities","title":"Use Widgets in Activities","text":"<p>This part will show you how to use and integrate Widgets into your Activity. Looking back at our bare Activity example, we rendered the text <code>\"I am a bare rendered example text\"</code>, so we'll be using a ComponentWidget just this time with the text <code>\"I am an example text rendered with a ComponentWidget\"</code>. We're building onto the code from the previous example so if you haven't already gone through it, we recommend taking a look at it here.</p> Important Note <p>Remember that we're explaining the Activity System in multiple steps. This part of the page will explain how to create Activities with Widgets but without LSS. This is for example purposes only; we highly recommend using Widgets and LSS in your Activities, as the system is not optimized for Widgets without LSS. It is possible but don't expect your code to work forever; there is a high chance that the methods you use will be deprecated at any time.</p> <p>Looking back at the bare Activity example, we remove the <code>render</code> method overwrite, as we don't need that anymore because the ComponentWidget will render the text for us. Now we overwrite the <code>initialize</code> method. Keep in mind that the super call has to be at the head of the method body. The method will be called any time the window is resized, the Activity is manually reloaded, or when the Activity was opened.</p> <p>Then we create a new ComponentWidget. In this case, we will create a non-translatable ComponentWidget by calling <code>ComponentWidget.text</code> and declare our text as the first parameter. Because we want our text to be colored, we'll set the color of our choice as the second parameter, in this case, Gold. The call should look like this in the end: <code>ComponentWidget.text(\"I am an example text rendered with a ComponentWidget\", NamedTextColor.GOLD)</code>. Now we just declare it as a field and call <code>this.document().addChild(this.componentWidget)</code> as this will add the ComponentWidget to our Activity.</p> <p>Theoretically, we could start the client, and our text would be rendered. But we haven't set the position yet. We'll only look at LSS in the next part, so we need to set the position with our Java code. To do this, we need to overwrite the protected void <code>postStyleSheetLoad</code> and again keep the super call as it notifies all child widgets that the style sheets have been loaded. We don't use those yet, but we leave the call in anyways. This method is called when all style sheets have been loaded and applied, just as the name suggests.</p> <p>Now we get the bounds of our activity with <code>this.bounds()</code> and the bounds of our ComponentWidget via <code>this.componentWidget.bounds()</code> and set the position of said widget with <code>widgetBounds.setPosition(activityBounds.getCenterX(), activityBounds.getCenterY()</code>. As we want the ComponentWidget to be centered we need also to add <code>this.componentWidget.alignmentX().set(WidgetAlignment.CENTER)</code> and <code>this.componentWidget.alignmentY().set(WidgetAlignment.CENTER)</code> this centers the Widget horizontally and vertically. </p>"},{"location":"pages/addon/activities/widgets/#widget-activity-result","title":"Widget Activity Result","text":"<p>Like with the bare Activity, this is what the code we described above would look like:</p>  ExampleBareActivity Result <pre><code>@AutoActivity\npublic class ExampleWidgetActivity extends SimpleActivity {\n\nprivate ComponentWidget componentWidget;\n\n@Override\npublic void initialize(Parent parent) {\nsuper.initialize(parent);\n\nthis.componentWidget = ComponentWidget.text(\n\"I am an example text rendered with a ComponentWidget\",\nNamedTextColor.GOLD\n);\nthis.document().addChild(this.componentWidget);\n}\n\n@Override\nprotected void postStyleSheetLoad() {\nsuper.postStyleSheetLoad();\n\nBounds activityBounds = this.bounds();\nBounds widgetBounds = this.componentWidgetBounds.bounds();\ncomponentWidgetBounds.setPosition(\nactivityBounds.getCenterX(),\nactivityBounds.getCenterY()\n);\n\nthis.componentWidget.alignmentX().set(WidgetAlignment.CENTER);\nthis.componentWidget.alignmentY().set(WidgetAlignment.CENTER);\n}\n\n@Override\npublic &lt;T extends LabyScreen&gt; @Nullable T renew() {\nreturn new ExampleWidgetActivity().generic();\n}\n}\n</code></pre> <p></p>"},{"location":"pages/addon/activities/widgets/#create-your-own-widget","title":"Create Your Own Widget","text":"<p>You cannot only use the Widgets we created, but you can also create your own ones.  This small example will show you how to create your first Widget and add it to your Activity.  The result of our little example will be a widget that displays a player's head to the left and a player's name.  This Widget will be applied in a vertical list with multiple entries.</p> <p>Important Note</p> <p>As it would be too complex to explain how to create a Widget without LSS, as of now you can only find an explanation on how to create Widgets here.</p>"},{"location":"pages/addon/activities/widgets/#all-widgets","title":"All Widgets","text":"<p>Below listed are all Widgets for use. They can be extended and modified for a more specific use case. </p> <p>Every Widget also has the LSS Properties from <code>AbstractWidget</code></p> Important Note <p>The LSS Properties noted here might be outdated and/or incomplete.</p>"},{"location":"pages/addon/activities/widgets/#input-widgets","title":"Input Widgets","text":"<p>Input Widgets are Widgets that allow direct user input.</p>"},{"location":"pages/addon/activities/widgets/#button","title":"Button","text":"<p>The <code>ButtonWidget</code> is an Input-Widget that performs a specific action (set with <code>setPressable(Pressable)</code>) when pressed.  It can be created with a String with <code>ButtonWidget.text</code> and a Component with <code>ButtonWidget.component</code>.  The Widget has the following LSS properties: </p> <ul> <li>Everything from <code>HorizontalListWidget</code> (because the Button can have an Icon)</li> <li>icon </li> </ul>"},{"location":"pages/addon/activities/widgets/#check-box","title":"Check Box","text":"<p>The <code>CheckBoxWidget</code> is an Input-Widget that switches between two states (<code>CHECKED</code> and <code>UNCHECKED</code>) when pressed but can also have the state <code>PARTLY</code>, but that can only be set via <code>setState(State)</code>. It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#color-picker","title":"Color Picker","text":"<p>The <code>ColorPickerWidget</code> is an Input-Widget that opens an Overlay when clicked where the user can select a specific color. It can be created via its constructor.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#dropdown","title":"Dropdown","text":"<p>The <code>DropdownWidget</code> is an Input-Widget that opens an Overlay when clicked in which the user can select an entry. The Widget is generic; you have to specify the type of the entries (preferably String or any Enum) as the argument.  Entries can be added with <code>add(GenericType)</code>, <code>addAll(GenericType[])</code> and <code>addAll(List&lt;GenericType&gt;)</code>. Translatable by calling <code>translationKeyPrefix(String)</code>, It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#keybind","title":"Keybind","text":"<p>The <code>KeybindWidget</code> is an Input-Widget that allows the user to set a specific Key.  It also accepts mouse buttons when expressly set with <code>acceptMouseButtons(Boolean)</code>. It can be created via its constructor.  The Widget has the same LSS properties as <code>TextFieldWidget</code>.</p>"},{"location":"pages/addon/activities/widgets/#multi-keybind","title":"Multi Keybind","text":"<p>The <code>MultiKeybindWidget</code> is an Input-Widget that allows users to set multiple keys simultaneously.  It can be created via its constructor.  The Widget has the same LSS properties as <code>TextFieldWidget</code>.</p>"},{"location":"pages/addon/activities/widgets/#slider","title":"Slider","text":"<p>The <code>SliderWidget</code> is an Input-Widget that allows users to select a specific number inside a set range (default is 0-100).  The Range can be set with <code>range(Float, Float)</code> and the steps with <code>steps(Float)</code>. It can be created via its constructor.   The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#switch","title":"Switch","text":"<p>The <code>SwitchWidget</code> is an Input-Widget that allows the user to enable or disable a certain feature.  Can be created with <code>SwitchWidget.create(Switchable)</code>, <code>SwitchWidget.text(String, String, Switchable)</code> or <code>SwitchWidget.translatable(String, String, Switchable)</code>.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#text-field","title":"Text Field","text":"<p>The <code>TextFieldWidget</code> is an Input-Widget that allows the user to type in any text.  Typed-in text can be validated by calling <code>validator(Predicate)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>cursor-color</code> - the color of the cursor (default is <code>white</code>)</li> <li><code>font-size</code> - size of the text (default is <code>1.0</code>)</li> <li><code>mark-color</code> - the color of the marked background (default is <code>-1</code>)</li> <li><code>mark-text-color</code> - color of the marked text (default is <code>rgb(32, 32, 170)</code>)</li> <li><code>place-holder-color</code> - the color of the placeholder text (default is <code>dark-gray</code>)</li> <li><code>text-alignment-x</code> - either <code>left</code>, <code>center</code> or <code>right</code> (default is <code>left</code>)</li> <li><code>text-alignment-y</code> - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>)</li> <li><code>text-color</code> - the color of the text (default is <code>white</code>)</li> <li><code>type</code> - either <code>default</code> or <code>vanilla-window</code> (default is <code>default</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#grid-widgets","title":"Grid Widgets","text":"<p>Grid Widgets are Widgets that automatically set the position of children in a specific way.</p>"},{"location":"pages/addon/activities/widgets/#horizontal-list","title":"Horizontal List","text":"<p>The <code>HorizontalListWidget</code> is a Grid-Widget that displays all its entries in a horizontal list. Add entries by executing <code>addEntry(Widget)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>layout</code> - the layout of the list - either <code>spread</code>, <code>fill</code> or <code>stack</code> (default is <code>stack</code>) </li> <li><code>space-between-entries</code> - the space between each entry (default is <code>1</code>) </li> </ul>"},{"location":"pages/addon/activities/widgets/#tiles-grid","title":"Tiles Grid","text":"<p>The <code>TilesGridWidget</code> is a Grid-Widget that displays all its tiles in a specific grid that can be set via LSS.  The Widget is generic; you have to specify the type of widgets you want to add as the argument. Tiles can be added via <code>addTile(GenericType)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>space-between-entries</code> - the space between each entry (default is <code>0</code>) </li> <li><code>tile-height</code> - the height of the tiles - set to <code>-1</code> to make the tiles a square (default is <code>-1</code>) </li> <li><code>tiles-per-line</code> - the number of tiles per line (default is <code>3</code>) </li> </ul>"},{"location":"pages/addon/activities/widgets/#vertical-list","title":"Vertical List","text":"<p>The <code>VerticalListWidget</code> is a Grid-Widget that displays all its entries in a vertical list.  The Widget is generic; you have to specify the type of widgets you want to add as the argument. Children can be added via <code>addChild(GenericType)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>list-alignment</code> - the alignment the children should have inside the list - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>) </li> <li><code>list-order</code> - the order of the children - either <code>normal</code> or <code>reverse</code> (default is <code>normal</code>)</li> <li><code>overwrite-width</code> - if the width of children should be set to the with of the list (default is <code>true</code>)</li> <li><code>render-out-of-bounds</code> - if the children should be rendered out of bounds, it makes sense if the Widget is inside a <code>ScrollWidget</code> (default is <code>false</code>)</li> <li><code>selectable</code> - if the children should be selected on click (default is <code>false</code>)</li> <li><code>space-between-entries</code> - the space between each entry (default is <code>1</code>) </li> <li><code>squeeze-height</code> - if children that would have been rendered out of bounds should be squeezed to stay in the bounds (default is <code>false</code> - use with caution!)</li> </ul>"},{"location":"pages/addon/activities/widgets/#utility-widgets","title":"Utility Widgets","text":"<p>Utility Widgets are Widgets that can be useful for any Activity. </p>"},{"location":"pages/addon/activities/widgets/#component","title":"Component","text":"<p>The <code>ComponentWidget</code> is a Utility-Widget that displays any Component. Can be created with <code>ComponentWidget.text</code>, <code>Componentwidget.i18n</code> and <code>ComponentWidget.component</code>. Each factory method has multiple implementations.  The Widget has the following LSS properties: </p> <ul> <li><code>allow-colors</code> - if the color of the component should be used (default is <code>true</code>)</li> <li><code>font-size</code> - how much the component should be scaled (default is <code>1.0</code>)</li> <li><code>line-spacing</code> - the spacing between multiple lines if <code>overflow-strategy</code> is <code>wrap</code> (default is <code>0.0</code>)</li> <li><code>max-lines</code> - the number of maximum lines that should be displayed if <code>overflow-strategy</code> is <code>wrap</code> (default is <code>0</code>, set to <code>0</code> to disable)</li> <li><code>overflow-strategy</code> - the strategy that is applied when text is longer than the bounds allow - either <code>wrap</code> or <code>clip</code> (default is <code>wrap</code>)</li> <li><code>scale-to-fit</code> - if the component should be scaled to fit the bounds if it would overflow (default is <code>false</code>)</li> <li><code>shadow</code> - if the component should have a shadow (default is <code>true</code>)</li> <li><code>text-color</code> - the color of the component (default is <code>-1</code>, set to <code>-1</code> to disable)</li> </ul>"},{"location":"pages/addon/activities/widgets/#div","title":"Div","text":"<p>The <code>DivWidget</code> is a Utility-Widget that does nothing special, as it is just an implementation of <code>SimpleWidget</code> and can be used for creating simple containers without automatic alignment.  It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#fading","title":"Fading","text":"<p>The <code>FadingWidget</code> is a Utility-Widget that slowly fades out at a specific timestamp. It can be created with either <code>FadingWidget.until(Widget, Long)</code> to specify a timestamp or <code>FadingWidget.forMillis(Widget, Long)</code> to specify the milliseconds until the Widget fades.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#hr","title":"Hr","text":"<p>The <code>HrWidget</code> is a Utility-Widget that acts as a separator between Widgets.  It renders a line with the size of the Widget's inner bounds (only in the Fancy Theme!) It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#icon","title":"Icon","text":"<p>The <code>IconWidget</code> is a Utility-Widget that renders an <code>Icon</code>. It can be created via its constructor.  The Widget has the following LSS properties: </p> <ul> <li><code>icon</code> - the rendered Icon (the argument sets the default value in the constructor)</li> <li><code>color</code> - the color of the Icon (default is <code>-1</code>)</li> <li><code>object-fit</code> - the fit of the Icon inside the Widget's bounds - either <code>fill</code>, <code>contain</code>, <code>cover</code>, <code>scale-down</code> or <code>none</code> (default is <code>fill</code>)</li> <li><code>clickable</code> - if the Icon should be slightly zoomed when hovered (default is <code>false</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#screen-renderer","title":"Screen Renderer","text":"<p>The <code>ScreenRendererWidget</code> is a Utility-Widget that renders any Activity inside the bounds of the Widget. It can be created with its constructor. Calling the default constructor doesn't forward the style.  The Widget has the following LSS properties: </p> <ul> <li><code>interactable</code> - if the user should be able to interact with the rendered screen (default is <code>true</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#scroll","title":"Scroll","text":"<p>The <code>ScrollWidget</code> is a Utility-Widget that allows scrolling Widgets vertically (preferably <code>VerticalListWidget</code> or <code>TilesGridWidgets</code>).  It automatically adds a <code>ScrollbarWidget</code> as its second child. The child has to have their height set to <code>fit-content</code>, and the <code>ScrollWidget</code>'s height has to be fixed for everything to work. Can be created with either <code>new ScrollWidget(VerticalListWidget)</code> or <code>new ScrollWidget(Widget, ListSession&lt;&gt;)</code>.  The Widget has the following LSS properties: </p> <ul> <li><code>enable-scroll-content</code> - if content should be scrolled when dragging the mouse (default is <code>false</code>)</li> <li><code>scrollSpeed</code> - how fast the content should be scrolled (default is <code>-1</code>, set to <code>-1</code> to calculate the scroll speed automatically based on the number of children)</li> <li><code>child-align</code> - where the content should be aligned - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#scrollbar","title":"Scrollbar","text":""},{"location":"pages/addon/activities/widgets/#abstract-widgets","title":"Abstract Widgets","text":"<p>Abstract Widgets are not for direct use and are therefore intended exclusively for inheritance and extension.</p>"},{"location":"pages/addon/activities/widgets/#abstract-widget","title":"Abstract Widget","text":"<p>The <code>AbstractWidget</code> is the main implementation of almost every Widget.  The generic type declares the type of its children.  The Widget and, therefore all inheriting Widgets have the following LSS properties (if no default value is specified, the default value is <code>null</code>, and the property has to be set to take effect)  As there are so many, they are split into different sections:</p>"},{"location":"pages/addon/activities/widgets/#positioning-bounds","title":"Positioning (Bounds)","text":"<p>Every property (except the <code>padding</code> and <code>margin</code> allrounder) in this section can also have a percentage. The <code>width: 5%</code> will result in the width being 5% of the parent's width.</p> <ul> <li><code>left</code> - the relative left position to the parent</li> <li><code>top</code> - the relative top position to the parent</li> <li><code>right</code> - the relative right position to the parent</li> <li><code>bottom</code> - the relative bottom position to the parent</li> <li><code>width</code> - the width (can be a number but also <code>fit-content</code> or <code>height</code>)</li> <li><code>height</code> - the height (can be a number but also <code>fit-content</code> or <code>width</code>)</li> <li><code>max-width</code> - the maximum width (useful when the widget has no fixed width)</li> <li><code>max-height</code> - the maximum height (useful when the Widget has no fixed height)</li> <li><code>min-width</code> - the minimum width (useful when the Widget has no fixed width)</li> <li><code>min-height</code> - the minimum height (useful when the Widget has no fixed height)</li> <li><code>padding</code> - the padding (has to be this format: <code>TOP RIGHT BOTTOM LEFT</code> or just one number to set the same padding in all directions)</li> <li><code>padding-top</code> - the padding at the top (default is <code>0.0</code>)</li> <li><code>padding-right</code> - the padding at the right (default is <code>0.0</code>)</li> <li><code>padding-bottom</code> - the padding at the bottom (default is <code>0.0</code>)</li> <li><code>padding-left</code> - the padding at the left (default is <code>0.0</code>)</li> <li><code>margin</code> - the margin (has to be this format: <code>TOP RIGHT BOTTOM LEFT</code> or just one number to set the same margin in all directions)</li> <li><code>margin-top</code> - the margin at the top (default is <code>0.0</code>)</li> <li><code>margin-right</code> - the margin at the right (default is <code>0.0</code>)</li> <li><code>margin-bottom</code> - the margin at the bottom (default is <code>0.0</code>)</li> <li><code>margin-left</code> - the margin at the left (default is <code>0.0</code>)</li> <li><code>alignment-x</code> - the horizontal anchor point of the widget - either <code>left</code>, <code>center</code> or <code>right</code> (default is <code>left</code>)</li> <li><code>alignment-y</code> - the vertical anchor point of the widget - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>)</li> <li><code>use-floating-point-position</code> - if the position should use Float instead of Integer (default is <code>false</code> in Vanilla- and <code>true</code> in Fancy-Theme)</li> <li><code>fit-outer</code> - if fit-content should be applied to the outer instead of the inner bounds of the children (default is <code>false</code>)</li> <li><code>box-sizing</code> - how the width and height should be calculated - either <code>content-box</code> or <code>border-box</code> (default is <code>content-box</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#visual","title":"Visual","text":"<ul> <li><code>animation-duration</code> - the duration of the animation - in milliseconds (default is <code>0</code>)</li> <li><code>animation-timing-function</code> - how animations should be interpolated - either <code>linear</code>, <code>ease-in-out</code>, <code>ease-in</code> or <code>ease-out</code> (default is <code>ease-in-out</code>)</li> <li><code>background-color</code> - the color of the background (default is 0, set to 0 to disable)</li> <li><code>background-dirt-brightness</code> - the brightness of the dirt background (default is <code>32</code>)</li> <li><code>filter</code> - filters that should be applied - possible are <code>blur(RADIUS)</code> and <code>stencil-background</code></li> <li><code>font-weight</code> - the weight of the font</li> <li><code>opacity</code> - the opacity - has to be between <code>0.0</code> and <code>1.0</code> (default is <code>1.0</code>)</li> <li><code>render-children</code> - if the children should be rendered (default is <code>true</code>)</li> <li><code>renderer</code> - which <code>ThemeRenderer</code> the Widget uses</li> <li><code>scale</code> - the scale in which the Widget is rendered (default is <code>1.0</code>)</li> <li><code>visible</code> - if the widget is visible or not (default is <code>true</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#behavioral","title":"Behavioral","text":"<ul> <li><code>always-focused</code> - if the Widget should always have the attribute <code>FOCUSED</code> (default is <code>false</code>)</li> <li><code>background-always-dirt</code> - if the background should always stay dirt, even if ingame (default is <code>false</code>)</li> <li><code>background-dirt-shift</code> - the shift of the dirt background</li> <li><code>draggable</code> - if the Widget can be dragged (default is <code>false</code>)</li> <li><code>interactable</code> - if the widget can be interacted with (default is <code>true</code>)</li> <li><code>mouse-render-distance</code> - in which distance to your mouse the Widget will get visible (default is <code>0.0</code>, set to <code>0.0</code> to disable)</li> <li><code>pressable</code> - if clicking the widget fires the <code>Pressable</code> callback (default is <code>true</code>)</li> <li><code>priority-layer</code> - depending on what is set the Widget will be rendered before everything else or after - either <code>very-back</code>, <code>back</code>, <code>normal</code>, <code>front</code>, <code>very-front</code> (default is <code>normal</code>)</li> <li><code>stencil</code> - if the widget content should not be able out of bounds (default is <code>false</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#list-widget","title":"List Widget","text":"<p>The <code>ListWidget</code> is the parent of every list like Widget.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#simple-widget","title":"Simple Widget","text":"<p>The <code>SimpleWidget</code> inherits <code>AbstractWidget</code> and removes the generic.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#wrapped-widget","title":"Wrapped Widget","text":"<p>The <code>WrappedWidget</code> is a \"pseudo Widget\" that wraps around its child and acts like it.  The Widget has no LSS properties as it redirects everything to its child. deprecated!</p>"},{"location":"pages/addon/features/commands/","title":"Create Commands","text":"<p>With LabyMod 4, you can easily create custom client-side commands. This page will show you how.</p>"},{"location":"pages/addon/features/commands/#the-super-method","title":"The Super Method","text":"<p>The first parameter in the super constructor call is the prefix, see it as the name of your command. Every parameter after is an alias and thus optional.</p>"},{"location":"pages/addon/features/commands/#the-execute-method","title":"The Execute Method","text":"<p>The execute method contains the code that is executed if the player is using your command. If you return <code>true</code>, the command will be consumed by LabyMod. If you return <code>false</code>, the command will not be consumed and will be sent to the server.</p> <p>Before you're able to use and test your command in-game, you'll need to register the command by calling  <code>this.registerCommand(new ExampleCommand());</code> in your main class. You don't need to do anything else, after registering the command and restarting LabyMod you can submit \"/notify\" or \"/alias\" in the ingame-chat and your command will be executed.</p>  ExampleCommand <pre><code>public class ExampleCommand extends Command {\n\nprivate final NotificationController notificationController;\n\npublic ExampleCommand() {\nsuper(\"notify\", \"alias\");\nthis.notificationController = Laby.references().notificationController();\n}\n\n@Override\npublic boolean execute(String prefix, String[] arguments) {\nif (prefix.equalsIgnoreCase(\"alias\")) {\nthis.displayMessage(Component.text(\"You used an Alias!\", NamedTextColor.AQUA));\nreturn false;\n}\n\nString title;\nString text;\n\nif (arguments.length &lt; 2) {\ntitle = \"Title\";\ntext = \"Text\";\n} else {\ntitle = arguments[0];\ntext = arguments[1];\n}\nnotificationController.push(Notification.builder()\n.title(Component.text(title))\n.text(Component.text(text))\n.build());\nreturn true;\n}\n}\n</code></pre>"},{"location":"pages/addon/features/config/","title":"Creating a Configuration","text":"<p>From using our predefined setting widgets over creating your own, to a few things that didn't fit in with the rest. This page will show you everything there is to know about our configuration system.</p>"},{"location":"pages/addon/features/config/#create-a-basic-configuration","title":"Create a Basic Configuration","text":"<p>You can create your configuration by creating a new class and inheriting <code>AddonConfig</code>. This superclass requires you to implement the <code>enabled</code> method, as we want to allow servers to disable every addon they want. </p> <p>The only thing you always need to keep in mind while creating a configuration besides the type you need to inherit is that you need to use the <code>ConfigProperty</code> type for your settings, but just for specific types that you might want to use. More on which types you can use by default here. For any other types, use the type itself without declaring it as an argument on <code>ConfigProperty</code>.</p> <p>To create a setting that represents if your addon is enabled or not, you need to create a new field with the type <code>ConfigProperty</code>. Now add the type of your setting, in this case, <code>Boolean</code> as boolean. Now instantiate this property by declaring a new ConfigProperty with the default value as the argument, well use <code>true</code> as the default value. The result would look like this <code>ConfigProperty&lt;Boolan&gt; enabled = new ConfigProperty&lt;&gt;(true)</code>. Now, if we want to use this property in an event, we'll get the property (preferably by its getter) and call <code>get()</code>. This will get us the value of the property.</p> <p>You can only use various types for your <code>ConfigProperty</code> by default.  The current valid types are:</p> <ul> <li>String</li> <li>Character</li> <li>Boolean</li> <li>Integer</li> <li>Long</li> <li>Double</li> <li>Float</li> <li>Short</li> <li>Byte</li> <li>any Enum</li> <li>Key</li> <li>MouseButton</li> <li>ResourceLocation</li> </ul>"},{"location":"pages/addon/features/config/#using-predefined-setting-widgets","title":"Using Predefined Setting Widgets","text":"<p>The following content lists all of our Setting Widgets that will be served by using the Addon API, with possible arguments (brackets surround optional arguments), compatible types, and a short description that you can create via an annotation:</p>"},{"location":"pages/addon/features/config/#switch-widget","title":"Switch Widget","text":"<p>Annotation: <code>SwitchSetting</code>  Arguments: none  Compatible Type: <code>Boolean</code>  Description: </p>"},{"location":"pages/addon/features/config/#slider-widget","title":"Slider Widget","text":"<p>Annotation: <code>SliderSetting</code>  Arguments: <code>min</code> - smallest value possible, <code>max</code> - biggest value possible, (<code>steps</code> - the amount of how much the value will increase/decrease on each move - default is 1)  Compatible Types: <code>Integer</code>, <code>Float</code>, <code>Double</code>, <code>Short</code>, <code>Byte</code>, <code>Long</code>  Description: </p>"},{"location":"pages/addon/features/config/#text-field-widget","title":"Text Field Widget","text":"<p>Annotation: <code>TextFieldSetting</code>  Arguments: (<code>maxLength</code> - the maximal length of the string entered)  Compatible Type: <code>String</code>  Description: </p>"},{"location":"pages/addon/features/config/#key-bind-widget","title":"Key Bind Widget","text":"<p>Annotation: <code>KeyBindSetting</code>  Arguments: none  Compatible Type: <code>Key</code>  Description: </p>"},{"location":"pages/addon/features/config/#multi-key-bind-widget","title":"Multi Key Bind Widget","text":"<p>Annotation: <code>MultiKeyBindSetting</code>  Arguments: none  Compatible Type: <code>Key[]</code>  Description: </p>"},{"location":"pages/addon/features/config/#color-picker-widget","title":"Color Picker Widget","text":"<p>Annotation: <code>ColorPickerSetting</code>  Arguments: (<code>alpha</code> - whether the user should be able to change the transparency - default is false)  Compatible Type: <code>Integer</code>  Description: </p>"},{"location":"pages/addon/features/config/#dropdown-widget","title":"Dropdown Widget","text":"<p>Annotation: <code>DropdownSetting</code>  Arguments: none  Compatible Types: any enum  Description: </p>"},{"location":"pages/addon/features/config/#button-widget","title":"Button Widget","text":"<p>Annotation: <code>ButtonSetting</code>  Arguments: (<code>text</code> - a String that will be displayed - default is \"\"), (<code>translation</code> - the key to a translation within your localization files, default is \"\")  Compatible Types: any public method, not ConfigProperty Description: </p>"},{"location":"pages/addon/features/config/#addon-activity-widget","title":"Addon Activity Widget","text":"<p>Annotation: <code>AddonActivityWidget</code>  Arguments: (<code>text</code> - a String that will be displayed - default is \"\"), (<code>translation</code> - the key to a translation within your localization files, default is \"\")  Compatible Types: any public method that returns an Activity, not ConfigProperty Description: </p>"},{"location":"pages/addon/features/config/#further-customize-the-settings","title":"Further Customize the Settings","text":"<p>In addition to using predefined widgets for your settings, you also have a few other options to customize them.  The following points are not very precisely explained, but you can see everything from the following subsections and most of the subsections before in this section.</p>"},{"location":"pages/addon/features/config/#create-sections","title":"Create Sections","text":"<p>You can create sections in your settings; you just have to add the annotation <code>@SettingSection</code> above the first field that you want to have in said section. Now all you have to do is set the identifier as the annotation's parameter and add it to your internationalization file. </p>"},{"location":"pages/addon/features/config/#create-sub-settings","title":"Create Sub Settings","text":"<p>If you want more structure in your settings but don't want to use Sections, you can create sub-settings that can be accessed via a button. Just create a new class, and let it inherit from <code>Config</code>. Add a field with the same type in your configuration (just the type, not a <code>ConfigProperty</code>) and create a new instance of said class. You might have noticed that you don't have to use the <code>AddonConfig</code> superclass for sub-settings. The <code>AddonConfig</code> class is required for your main configuration but not for sub-settings.</p> <p>If you want to display more than just the advanced button (the button that lets you access the sub-settings), add the <code>@ParentSwitch</code> annotation to the most important switch in your sub-settings.</p>"},{"location":"pages/addon/features/config/#use-icons-for-settings","title":"Use Icons for Settings","text":"<p>To display icons in front of your settings, you'll need to declare a sprite texture with the <code>@SpriteTexture</code> annotation. Set the name of your file as the value of the annotation (the base path is <code>assets/NAMESPACE/themes/THEME/textures/sprite</code>, while the namespace is the namespace you set in your <code>build.gradle.kts</code> and the theme to the current theme. If you want your icons to be visible in all themes, put the texture in the vanilla theme). More on sprite textures here. </p>"},{"location":"pages/addon/features/config/#example-of-the-previous-sections","title":"Example of the Previous Sections","text":"<p>These are some example files showing a few of the functions mentioned before.</p>  ExampleConfiguration ExampleSubSetting ExampleEnum en_us.json Result <pre><code>@ConfigName(\"settings\")\n@SpriteTexture(\"example_sprite.png\")\npublic class ExampleConfiguration extends AddonConfig {\n\n@SpriteSlot(x = 1, y = 1)\n@SwitchSetting\nprivate ConfigProperty&lt;Boolean&gt; enabled = new ConfigProperty&lt;&gt;(true);\n\n@SettingSection(\"print\")\n@SpriteSlot(x = 6)\n@TextFieldSetting\nprivate ConfigProperty&lt;String&gt; text = new ConfigProperty&lt;&gt;(\"Hello World!\");\n\n@SettingSection(\"miscellaneous\")\n@SpriteSlot(x = 1, y = 3)\nprivate ExampleSubSettings subSettings = new ExampleSubSettings();\n\n@SpriteSlot(y = 3)\n@DropdownSetting\nprivate ConfigProperty&lt;ExampleEnum&gt; type = new ConfigProperty&lt;&gt;(ExampleEnum.SCALENE_TRIANGLE);\n\n@MethodOrder(after = \"text\")\n@SpriteSlot(x = 2, y = 6)\n@ButtonSetting(text = \"Print!\")\npublic void print(Setting setting) {\nLabyGuice.getInstance(ExampleAddon.class).logger()\n.info(setting.getId() + \" was clicked! \" + this.text);\n}\n\n@Override\npublic ConfigProperty&lt;Boolean&gt; enabled() {\nreturn this.enabled;\n}\n}\n</code></pre> <pre><code>public class ExampleSubSettings extends Config {\n\n@ParentSwitch\n@SpriteSlot(x = 7)\n@SwitchSetting\nprivate ConfigProperty&lt;Boolean&gt; enabled = new ConfigProperty&lt;&gt;(true);\n\n@SpriteSlot(x = 1, y = 6)\n@ColorPickerSetting\nprivate ConfigProperty&lt;Integer&gt; labyModColor = new ConfigProperty&lt;&gt;(\nnew Color(10, 85, 165).getRGB());\n\n@SpriteSlot(x = 2)\n@KeyBindSetting\nprivate ConfigProperty&lt;Key&gt; keyBind = new ConfigProperty&lt;&gt;(Key.F);\n}\n</code></pre> <pre><code>public enum ExampleEnum {\nHEART, CIRCLE, RECTANGLE, TRIANGLE, SCALENE_TRIANGLE;\n}\n</code></pre> <pre><code>{\n\"example\": {\n\"settings\": {\n\"name\": \"ExampleAddon\",\n\"enabled\": {\n\"name\": \"Enabled\"\n},\n\"text\": {\n\"name\": \"Text to be Printed\"\n},\n\"print\": {\n\"name\": \"Click Me to Print the Text\"\n},\n\"subSettings\": {\n\"name\": \"Miscellaneous Sub Settings\",\n\"labyModColor\": {\n\"name\": \"The LabyMod Color\"\n},\n\"keyBind\": {\n\"name\": \"Key Bind\"\n}\n},\n\"type\": {\n\"name\": \"Display Type\",\n\"heart\": \"Heart\",\n\"circle\": \"Circle\",\n\"rectangle\": \"Rectangle\",\n\"triangle\": \"Triangle\",\n\"scaleneTriangle\": \"Weird Shape\"\n},\n\"header\": {\n\"miscellaneous\": {\n\"name\": \"Miscellaneous\"\n},\n\"print\": {\n\"name\": \"Print!\"\n}\n}\n}\n}\n}\n</code></pre> <p></p>"},{"location":"pages/addon/features/config/#create-custom-settings","title":"Create Custom Settings","text":""},{"location":"pages/addon/features/config/#register-your-own-setting-type","title":"Register Your Own Setting Type","text":"<p>todo: write, check chattime</p>"},{"location":"pages/addon/features/config/#create-custom-setting-widgets","title":"Create Custom Setting Widgets","text":"<p>todo: write, check chattime</p>"},{"location":"pages/addon/features/events/","title":"Use and Create Events","text":"<p>With LabyMod 4 we not only deliver more Events, but they are also very similar to use, like the events of Minecraft server software like Bukkit and BungeeCord.</p>"},{"location":"pages/addon/features/events/#the-most-important-events","title":"The Most Important Events","text":"<p>We deliver a variety of events, but the following are the ones with the most common use cases:</p>"},{"location":"pages/addon/features/events/#addon-enable-event","title":"Addon Enable Event","text":"<p>The <code>AddonEnableEvent</code> is fired right after we detected your addon. This Event is only fired in your addon; you cannot use it to detect other addons. The event contains the Installed Addon Info, the reference storage of your addon and the main instance your addon was initialized with.</p>"},{"location":"pages/addon/features/events/#addon-post-enable-event","title":"Addon Post Enable Event","text":"<p>The exact moment when the <code>AddonPostEnableEvent</code> is fired depends on the current state of LabyMod. Suppose your addon is loaded directly after the game start (for example while in the addon develop environment or when the addon has been installed before). In that case, the Event will be fired as soon as LabyMod itself has been fully initialized. But if your addon is enabled while LabyMod is already initialized (when a user downloads your addon via the addon store), the Event will be fired right after we enabled it.</p>"},{"location":"pages/addon/features/events/#global-addon-post-enable-event","title":"Global Addon Post Enable Event","text":"<p>The <code>GlobalAddonPostEnableEvent</code> is called if an addon has been enabled. Same as <code>AddonPostEnableEvent</code>, the moment the event is fired depends on the current state of LabyMod. Can be used to detect if another addon has been enabled.</p>"},{"location":"pages/addon/features/events/#addon-unload-event","title":"Addon Unload Event","text":"<p>The class exists, but the Event won't be fired yet. It can be used to save custom configurations or close open connections to prevent a timeout.</p>"},{"location":"pages/addon/features/events/#chat-message-send-event","title":"Chat Message Send Event","text":"<p>The <code>ChatMessageSendEvent</code> is fired when sending a chat message to the server. It can be used to manipulate outgoing messages but also can be canceled. </p>"},{"location":"pages/addon/features/events/#chat-receive-event","title":"Chat Receive Event","text":"<p>The <code>ChatReceiveEvent</code> is fired when a message is registered to be shown in chat. It can be used to manipulate incoming messages. The Event is cancellable.</p>"},{"location":"pages/addon/features/events/#game-tick-event","title":"Game Tick Event","text":"<p>The <code>GameTickEvent</code> is fired twice every tick. Once with the phase <code>PRE</code> and once with the phase <code>POST</code>. The phase represents the current state of a tick. If it has the phase <code>PRE</code>, it is fired before Minecraft registers the tick to all its different handlers; if it's the <code>POST</code> phase, it is fired after Minecraft itself handled the tick. A tick represents 50 milliseconds (20 ticks per second).</p>"},{"location":"pages/addon/features/events/#json-config-loader-initialize-event","title":"Json Config Loader Initialize Event","text":"<p>The <code>JsonConfigLoaderInitializeEvent</code> is fired when the configuration loader is initialized. This Event is used to create your own type adapters for your configuration.</p>"},{"location":"pages/addon/features/events/#network-disconnect-event","title":"Network Disconnect Event","text":"<p>The <code>NetworkDisconnectEvent</code> will be fired if the connection to a server closes (so either if the user disconnects or gets kicked).</p>"},{"location":"pages/addon/features/events/#network-login-event","title":"Network Login Event","text":"<p>The <code>NetworkLoginEvent</code> will be fired as soon as the user connects to a server. Contains the ServerData.</p>"},{"location":"pages/addon/features/events/#network-server-switch-event","title":"Network Server Switch Event","text":"<p>The <code>NetworkServerSwitchEvent</code> is fired when the user is already connected to a server but switches to a sub-server (for example, when connected to a proxy and switching from the hub to survival games).</p>"},{"location":"pages/addon/features/events/#setting-initialize-event","title":"Setting Initialize Event","text":"<p>The <code>SettingInitializeEvent</code> is fired when an in-game setting was initialized; is used to modify setting Widgets at a later point (adding custom entries to a Dropdown for example).  The listener has to be registered before the setting category is added!</p>"},{"location":"pages/addon/features/events/#every-other-event","title":"Every Other Event","text":"<p>todo: write</p>"},{"location":"pages/addon/features/events/#create-your-very-own-events","title":"Create Your Very Own Events","text":"<p>todo: write</p>"},{"location":"pages/addon/features/internationalization/","title":"Internationalize your Addon","text":"<p>All internationalization files have to be located in the module called <code>core</code> and then down the folder structure <code>src/main/resources/assets/NAMESPACE/i18n/</code> (\"NAMESPACE\" should be replaced with the namespace you set in your <code>build.gradle.kts</code>). The default file for internationalization is called <code>en_us.json</code>, as English is the default language. </p>"},{"location":"pages/addon/features/internationalization/#create-custom-translations","title":"Create Custom Translations","text":"<p>You can do more than internationalize your settings. You also have the option to internationalize every other text that the user sees. Any time a <code>Component</code> is used, you have the option to just set a raw String via <code>Component.text</code>. Still, you also have the option to use your custom translations by using <code>Component.translatable</code>. Do you have arguments that need to be replaced? Not a problem! We replace arguments that are indicated with <code>%s</code> on every translation. </p> <p>So, for example instead of using a non-translated String like <code>\"The Addon has a rating of \" + rating + \" Stars!\"</code>, you could put a String like <code>\"The Addon has a rating of %s Stars!\"</code> in your internationalization file and create the Component with <code>Component.translatable(\"example.commands.info.rating\", rating)</code> and the output would be the same. The only difference is that your Addon can be used in many different languages without hard-coding every String.</p> <p>There are two possibilities to get the translated String if you don't want to use Components. If you want a String that cannot be null, you call <code>I18n.translate</code> with the translation key and the arguments.  The method will return the key if the translation key cannot be found in any internationalization file. Now, if you want to check if the translation key can be found easily, you call <code>I18n.getTranslation</code> with the translation key and possibly arguments.  The method will return <code>null</code> if the key cannot be found.</p> <p>As already mentioned, you can internationalize every text the user can see, even the widgets of our Activity system that display text. A list of all widgets delivered with our Addon API can be found here. </p>"},{"location":"pages/addon/features/internationalization/#support-multiple-languages","title":"Support Multiple Languages","text":"<p>The language in LabyMod and thus the preferred internationalization file of every Addon will change when switching the language in Minecraft itself. The fallback language always stays <code>en_us</code>. That means if, for example, a user selected German as the language in which Minecraft is displayed, we will search for a file called <code>de_de.json</code> in your Addon. If that file isn't found, we will use the default file and thus the English translations.</p> <p>All official supported languages can be found in  this Minecraft Fandom Wiki article. The relevant part of this chart is the In-game Locale Code. Your file has to have the same locale code. Otherwise, we can't identify your file as a match to the intended language.</p>"},{"location":"pages/addon/features/version-dependent/","title":"Write Version Dependent Code","text":"<p>While our API is entirely version-independent for you to use, you might still need to implement some version-dependent things yourself (such as niche things, just something we didn't implement). At the current moment, you might need to implement more yourself, as we're still implementing more and more stuff for you to use version independently.</p> <p>There are two ways to implement version-dependent; different use cases require different ways to implement them.</p> <p>The easiest method is to create an interface or abstract class and implement it in your desired version(s). This will result in the ability that you can control your version-dependent code from the core.</p> <p>The more complex way would be SpongePowered's Mixin. While Mixin is comparatively easy to use, it can be a bit confusing at the beginning, as all new things are.</p> Important Note <p>Please keep in mind that the examples on this page are version dependent. We are showing the examples for Minecraft 1.19.1, so depending on the date you're reading this, recreating the examples might not be possible, we'll try to keep them updated, though, and if we do, we update the version in this note.</p>"},{"location":"pages/addon/features/version-dependent/#access-the-minecraft-code-the-normal-way","title":"Access the Minecraft Code \"the Normal Way\"","text":"Important Note <p>This is slightly outdated as we removed Guice. See ToggleSneak on GitHub for \"the new way\".</p> <p>You should only use this method for things you can access without using Reflections, as using Reflections can have a high impact on the performance of the players that use your addon.</p> <p>The use case we will implement in the following example will show how to display messages in the player's chat. We have already implemented this, but it is relatively easy to show and understand.</p> <p>We will first create a new interface in our <code>core</code>- or <code>api</code> module called <code>ExampleChatExecutor</code> and declare a new method <code>void displayMessageInChat(String)</code>. Now we head to the module of the version we want and create a new class called <code>VersionedExampleChatExecutor</code> in our desired package. If there is no folder called <code>src</code> in the module, you'll need to create the following folder structure inside the module: <code>src/main/java/</code>.</p> <p>Now to the implementation. First, we implement the interface <code>ExampleChatExecutor</code>, and now the most important part: we need to add the annotation <code>Implement</code> to the class and declare <code>ExampleChatExecutor.class</code> as the argument. This will allow you to access the versioned implementation from the core module. Then we'll add the annotation <code>Singleton</code> to the class, as we don't need more than one object of this implementation. At this point, the only missing point is the actual implementation of Minecraft; we'll overwrite the <code>displayMessageInChat</code> method from our interface and create a new Component from our String with <code>Component.literal(message)</code>. Then we access the Chat GUI with <code>Minecraft.getInstance().gui.getChat()</code> and add our component with <code>addMessage(component)</code>.</p> <p>After implementing the <code>ExampleChatExecutor</code> interface, we go back to our <code>core</code> module and head into our <code>ExamplePingCommand</code> that we got from using the addon template. Then we remove the line where we are displaying a gold-colored \"Pong!\" Component get the object of our interface via <code>LabyGuice.getInstance(ExampleChatExecutor.class)</code>. We need to get the instance of the interface because we have no access to the <code>VersionedExampleChatExecutor</code> class when not in this specific module. Now, all we need to do is call the <code>displayMessageInChat</code> method from our interface and declare a String as an argument; we'll be using <code>\"Pong!\"</code> again.</p> <p>After starting LabyMod 4, joining a server, and executing \"/pong\", we'll see a colorless \"Pong!\". Now, if we want that message colored, we need to replace <code>String</code> in our interface with <code>Component</code>. Instead of using <code>Command.literal</code>, we get the <code>ComponentMapper</code> via <code>Laby.labyApi().minecraft().componentMapper()</code> and call <code>toMinecraftComponent(component)</code>. Now our component from the Adventure Component library was mapped to a Minecraft Component, and calling <code>displayMessageInChat(Component.text(\"Pong!\", NamedTextColor.GOLD))</code> in our Command works like before. Just with our own implementation.</p> <p>Those are the results from this example:</p>  ExampleChatExecutor VersionedExampleChatExecutor ExamplePingCommand <pre><code>public interface ExampleChatExecutor {\n\nvoid displayMessageInChat(String message);\n\nvoid displayMessageInChat(Component adventureComponent);\n}\n</code></pre> <pre><code>@Singleton\n@Implement(ExampleChatExecutor.class)\npublic class VersionedExampleChatExecutor implements ExampleChatExecutor {\n\n@Override\npublic void displayMessageInChat(String message) {\nComponent component = Component.literal(message);\nthis.addMessageToChat(component);\n}\n\n@Override\npublic void displayMessageInChat(net.kyori.adventure.text.Component adventureComponent) {\nComponentMapper componentMapper = Laby.labyAPI().minecraft().componentMapper();\nComponent component = (Component) componentMapper.toMinecraftComponent(adventureComponent);\nMinecraft.getInstance().gui.getChat().addMessage(component);\n}\n\nprivate void addMessageToChat(Component component) {\nMinecraft.getInstance().gui.getChat().addMessage(component);\n}\n}\n</code></pre> <pre><code>public class ExamplePingCommand extends Command {\n\n@Inject\nprivate ExamplePingCommand() {\nsuper(\"ping\", \"pong\");\n}\n\n@Override\npublic boolean execute(String prefix, String[] arguments) {\nif (prefix.equalsIgnoreCase(\"ping\")) {\nthis.displayMessage(Component.text(\"Ping!\", NamedTextColor.AQUA));\nreturn false;\n}\n\nExampleChatExecutor chatExecutor = LabyGuice.getInstance(ExampleChatExecutor.class);\nchatExecutor.displayMessageInChat(Component.text(\"Pong!\", NamedTextColor.GOLD));\nreturn true;\n}\n}\n</code></pre>"},{"location":"pages/addon/features/version-dependent/#access-the-minecraft-code-via-mixin","title":"Access the Minecraft Code via Mixin","text":"Important Note <p>Please keep in mind that the moment your addon uses Mixins, it requires a restart when downloaded via the addon store.</p> <p>todo: write</p>"},{"location":"pages/addon/features/version-dependent/#inheriting-version-dependent-code","title":"Inheriting Version Dependent Code","text":"<p>todo: write</p>"},{"location":"pages/addon/publishing/publish/","title":"Publish Your Addon","text":"<p>On this page, we're explaining what exactly you have to do to publish your addon. </p>"},{"location":"pages/addon/publishing/publish/#version-compatibility","title":"Version Compatibility","text":"<p>We're using version ranges to verify the compatibility of an addon with LabyMod 4 and the Minecraft version the user is playing with. </p>"},{"location":"pages/addon/publishing/publish/#the-star","title":"The Star","text":"<p>The version <code>*</code> indicates compatibility with all versions (even unreleased ones). Don't use this unless you're only using version-independent things from the official LabyMod 4 Addon API. </p>"},{"location":"pages/addon/publishing/publish/#single-version","title":"Single Version","text":"<p>Version <code>1.8.9</code> indicates compatibility with just Minecraft 1.8.9 and thus no other Minecraft version except Minecraft 1.8.9 will be supported. </p>"},{"location":"pages/addon/publishing/publish/#version-range","title":"Version Range","text":"<p>A version range is a range of versions supported. Contains The Star and Single Version.  A few examples: </p> <ul> <li><code>1.17&lt;1.19.2</code> - every version between 1.17.0 and 1.19.2 is supported - Everything below 1.17.0 (for example 1.16.5) or higher than 1.19.2 (for example 1.19.3) isn't.</li> <li><code>1.18.2&lt;*</code> - every version after (and including) Minecraft 1.18.2 is supported. Every version below 1.18.2 isn't supported.</li> </ul>"},{"location":"pages/addon/publishing/publish/#multi-version-range","title":"Multi Version Range","text":"<p>A multi-version range is a combination of Version Ranges and Single Versions. This is mostly used to guarantee a good experience when supporting multiple versions that have one or more major releases in between. Example:  <code>1.8.9,1.12.2,1.16.5&lt;1.19.2</code> - this supports Minecraft 1.8.9, 1.12.2 and everything in between (and including) 1.16.5 and 1.19.2. Minecraft 1.19-1.12.1, 1.13-1.16.4 and everything higher than (and including) 1.19.3 would not be supported.</p>"},{"location":"pages/addon/publishing/requirements/","title":"Requirements","text":"<p>soon</p>"},{"location":"pages/addon/setup/first-steps/","title":"First Steps","text":"<p>First you'll need a Java IDE, as of now we only support IntelliJ IDEA. Then download JDK (Java Development Kit) 17 if you haven't already and install it.</p> <p>Now  download or clone our addon template and open it in your preferred IDE.</p> <p>todo: fill with basic information</p>"},{"location":"pages/addon/setup/setup/","title":"Your first LabyMod 4 Addon","text":"<p>All you need to do to start your Addon is done. You should be able to start your Addon with LabyMod 4 right after you've imported the Gradle project, but there are a few things left that you shouldn't forget.</p> <p>To name a few of them:</p> <ul> <li>Basic Information: not only those who will test your Addon would benefit from providing some information, but we do too. Some information is crucial to guarantee a seamless experience</li> <li>Understanding the Example: you could start with coding stuff for your Addon, but we've written an example addon to show you the basics of how LabyMod 4 addons work.</li> </ul>"},{"location":"pages/addon/setup/setup/#provide-information-about-your-addon","title":"Provide information about your Addon","text":"<p>Head inside the <code>build.gradle.kts</code> and search for the block called <code>labyMod</code>.  Inside this block is an assignment to the field <code>defaultPackageName</code>, change the assigned value to the main package you're using in all modules (for example <code>net.labymod.addons.voicechat</code>). This allows us to generate important files to the right package.  Now search for the <code>addonInfo</code> segment and edit the following fields:</p> <ul> <li><code>namespace</code>: this attribute has to be unique for everything to work without complications. If you want to publish your Addon, we will check if this namespace is already taken by any other published addon, so nothing to worry about </li> <li><code>displayName</code>: the display name users will see when they view their installed addons</li> <li><code>author</code>: the name of your organization or you</li> <li><code>description</code>: a description that fits your Addon</li> <li><code>minecraftVersion</code>: the version combatibility of the addon</li> </ul> <p>After you have changed these attributes, reload the Gradle project, and you're good to go.</p>"},{"location":"pages/addon/setup/setup/#understanding-the-basics","title":"Understanding the Basics","text":"<p>Head to <code>core\\src\\main\\java</code> in your root project folder. You'll find some examples, starting with the main addon class: <code>ExampleAddon</code>.</p>"},{"location":"pages/addon/setup/setup/#the-main-class","title":"The Main Class","text":"<p>The most important thing about the main addon class is the <code>AddonMain</code> annotation. This annotation allows us to automatically generate the <code>addon.json</code>, basically the identifier of your Addon. That means without this file, LabyMod can't recognize your Addon, and thus it won't start.</p> <p>Now there are two ways to use this main class:</p> <ul> <li>With a Superclass that handles the necessary stuff for you (this is what we used in the example)</li> <li>Without anything in the background. Just a bare class, you have to handle almost everything yourself (logic-wise)</li> </ul>"},{"location":"pages/addon/setup/setup/#the-main-with-the-superclass","title":"The Main with the Superclass","text":"<p>We've written a Superclass for an easier and more convenient way to develop addons. By inheriting the class <code>LabyAddon</code>, everything is more straightforward. All you have to do is specify your configuration class (in our example, the class <code>ExampleConfiguration</code>, but more about that later) in 3 different places (the parts you need to replace are written in CAPS):</p> <ol> <li>after declaring your main class by appending <code>extends LabyAddon&lt;CONFIGURATION&gt;</code>. After doing that, your IDE should either mark the other two places as errors or replace them automatically, but we'll show you anyhow</li> <li>in the head of the getter <code>configurationClass</code> by changing it to <code>Class&lt;CONFIGURATION&gt;</code></li> <li>in the body of the same getter <code>configuraionClass</code> by changing the returned value to <code>CONFIGURATION.class</code></li> </ol> <p>Looking at the method <code>enable</code>, you'll see we used a method called <code>registerSettingCategory</code>. This method registers a new category in the LabyMod Settings, allowing users to enable/disable or configure other things regarding your Addon.</p> <p>Registering commands and listeners can be done by calling <code>registerListener</code> and <code>registerCommand</code> and providing the already initialized object.</p> <p>Now the final method we called here is <code>this.logger()</code>, a logger to print information to the console/log. This is nicer than <code>System.out.println()</code> because it is integrated with the Minecraft log. You can print information with <code>.info()</code>, warnings with <code>.warn()</code> or errors with <code>.error()</code>.</p>"},{"location":"pages/addon/setup/setup/#the-main-without-the-superclass","title":"The Main without the Superclass","text":"<p>As already mentioned, you can inherit the class <code>LabyAddon</code>, but you can also do it without it. </p> Important Note <p>While this is possible, we highly recommend creating Addons with our LabyAddon class as it implements some things that make creating addons easier, especially for beginners. </p> <p>This section stays empty for now, it would take too long to describe it, and we have an easier way.</p>"},{"location":"pages/addon/setup/setup/#the-configuration","title":"The Configuration","text":"<p>Now navigate to the class <code>ExampleConfiguration</code>. You'll see that this class inherits <code>AddonConfig</code>. This is necessary for the main configuration, as it requires you to inherit the <code>enabled</code> ConfigProperty.</p> <p>Looking at the class body, you will find a field called <code>enabled</code> with the <code>SwitchSetting</code> annotation.  The annotation declares the Widget that you'll find in your settings. In this case, the Widget is a SwitchSettingWidget, which toggles a boolean between on and off.</p> <p>You can find more about configurations here.</p>"},{"location":"pages/addon/setup/setup/#the-listener","title":"The Listener","text":"<p>Looking into the package <code>org.example.core.listener</code>, you'll find the class ExampleGameTickListener; it does what it says. It listens to the GameTickListener event. You can find a complete guide to our events  here.</p> <p>First, we declared a field with our addon main class as type. Then we created a constructor with our main class instance as a parameter.</p> <p>Basically, what this class does is, as already mentioned, listen to the GameTickEvent, which is called twice every tick (first one with phase PRE &amp; the second one with phase POST). In this case, we only listen to the PRE phase because we only want the rest called once. Inside the event, we access the field with our addon main instance; with this instance, we are gaining access to the logger we mentioned a few sections above and printing if the Addon is enabled or disabled.</p>"},{"location":"pages/addon/setup/setup/#the-command","title":"The Command","text":"<p>With the LabyMod 4 API, you can add your own commands with a simple-to-use command system. More on how to create own commands here.</p> <p>What we do in this class is as simple and basic as the command system in general. We are inheriting the class <code>Command</code>, creating the constructor of our class, and calling the constructor of the superclass with the main prefix of the command (in our case, <code>ping</code>) and the aliases (in this case, just <code>pong</code>).</p> <p>Now to the <code>execute</code> method. It is called when, as the name says, the command is executed, and we can handle it.</p> <p>FINISH AFTER THE COMMAND SYSTEM IS FINISHED</p>"},{"location":"pages/addon/setup/setup/#the-internationalization-file","title":"The Internationalization File","text":"<p>Go to the module called <code>core</code> and then navigate down to <code>src/main/resources/assets/example/i18n/</code> (the <code>example</code> folder has to be named after the namespace you set in your <code>build.gradle.kts</code>) and you should see a file with the name <code>en_us.json</code>. This is the default file for internationalization, as English is the default language. To dive deeper in the internationalization of LabyMod go to this article.</p> <p>First, we created a new JSON Object called <code>settings</code>, which implies that the following lines are for the settings; after that, we created another Json Object called <code>example</code>, this has to reflect the namespace that you set in your <code>build.gradle.kts</code>. In said Json Object we declared a String with the key <code>name</code>; this ends up being the name of the Addon, which you'll see on the category button linking to the settings of your Addon in the LabyMod Settings. Now we created another JSON Object with the key <code>enabled</code>, as this is the name of the field in our configuration; you will find another String with the key <code>name</code>. This is the name of the Setting Widget <code>enabled</code>.</p>"}]}